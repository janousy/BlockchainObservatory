{
  "name": "Neo4jSinkConnectorConnector_Txn_0",
  "config": {
    "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "errors.log.enable": "true",
    "errors.log.include.messages": "true",
    "topics": "algod_indexer_public_txn_flat",
    "neo4j.authentication.type": "NONE",
    "neo4j.server.uri": "bolt://172.23.149.212:7687",
    "value.converter.schemas.enable": "false",
    "neo4j.topic.cypher.algod_indexer_public_txn_flat": "FOREACH (x IN CASE WHEN event.typeenum = 1 THEN [1] ELSE [] END | MERGE (snd:Account{account: event.txn_snd}) MERGE (rcv:Account{account: event.txn_rcv}) CREATE (snd)-[:PAYMENT {txid: event.txid, amount: event.txn_amt, fee: event.txn_fee, blockNumber: event.round, intraBlockNumber: event.intra, closedSndAccountTx: event.txn_close}]->(rcv) ) FOREACH (x IN CASE WHEN event.typeenum = 2 THEN [1] ELSE [] END | MERGE (snd:Account{account: event.txn_snd}) MERGE (partNode:ParticipationNode{participationNodeId: 0}) CREATE (snd)-[:KEY_REGISTRATION {txid: event.txid, fee: event.txn_fee, blockNumber: event.round, intraBlockNumber: event.intra, keyRegistrationType: CASE WHEN event.txn_selkey IS NOT NULL THEN \"online\" ELSE \"offline\" END}]->(partNode) ) FOREACH (x IN CASE WHEN event.typeenum = 3 THEN [1] ELSE [] END | MERGE (snd:Account{account: event.txn_snd}) MERGE (asset:Asset{asset: event.asset}) CREATE (snd)-[:ASSET_CONFIGURATION {txid: event.txid, fee: event.txn_fee, blockNumber: event.round, intraBlockNumber: event.intra, assetId: event.txn_caid, configurationParameters: event.txn_apar, configurationType: CASE WHEN event.txn_caid IS NULL THEN \"creation\" WHEN event.txn_caid IS NOT NULL AND event.txn_apar IS NOT NULL THEN \"configuration\" ELSE \"destruction\" END}]->(asset) ) FOREACH (x IN CASE WHEN event.typeenum = 4 THEN [1] ELSE [] END | MERGE (snd:Account{account: event.txn_snd}) MERGE (asset:Asset{asset: event.asset}) MERGE (rcv:Account{account: event.txn_arcv}) CREATE (snd)-[:ASSET_TRANSFER {txid: event.txid, fee: event.txn_fee, blockNumber: event.round, intraBlockNumber: event.intra, amount: event.txn_aamt, assetId: event.txn_xaid, assetSenderInRevokingTx: event.txn_asnd, transferType: CASE WHEN event.txn_asnd IS NOT NULL THEN \"revoke\" WHEN event.txn_snd = event.txn_arcv THEN \"opt-in\" ELSE \"transfer\" END}]->(rcv) ) FOREACH (x IN CASE WHEN event.typeenum = 5 THEN [1] ELSE [] END | MERGE (snd:Account{account: event.txn_snd}) MERGE (asset:Asset{asset: event.asset}) CREATE (snd)-[:ASSET_FREEZE {txid: event.txid, fee: event.txn_fee, blockNumber: event.round, intraBlockNumber: event.intra, frozenAssetAccountHolder: event.txn_fadd, assetIdBeingFrozen: event.txn_faid, freezeType: CASE WHEN event.txn_afrz IS NOT NULL THEN \"freeze\" ELSE \"unfreeze\" END}]->(asset) ) FOREACH (x IN CASE WHEN event.typeenum = 6 THEN [1] ELSE [] END | MERGE (snd:Account{account: event.txn_snd}) MERGE (app:Application{application: event.asset}) CREATE (snd)-[:APPLICATION_CALL {txid: event.txid, fee: event.txn_fee, blockNumber: event.round, intraBlockNumber: event.intra, applicationCallTypeEnum: event.txn_apan, applicationId: event.txn_apid, approvalProgram: event.txn_apap, clearProgram: event.txn_apsu, applicationCallArguments: event.txn_apaa, accountsList: event.txn_apat, applicationsList: event.txn_apfa, assetsList: event.txn_apas, applicationCallType: CASE WHEN event.txn_apan IS NULL AND event.txn_apid IS NULL THEN \"create\" WHEN event.txn_apan = 1 THEN \"opt-in\" WHEN event.txn_apan = 2 THEN \"close-out\" WHEN event.txn_apan = 3 THEN \"clear-state\" WHEN event.txn_apan = 4 THEN \"update\" WHEN event.txn_apan = 5 THEN \"delete\" ELSE \"noOp\" END}]->(app) )"
  }
}